{"ast":null,"code":"import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport { LOG_IN_FAILRUE, LOG_IN_SUCCESS, LOG_IN_REQUEST, SIGNUP_REQUEST, SIGNUP_FAILRUE, SIGNUP_SUCCESSUSER_REQUEST, USER_SUCCESS, USER_FAILRUE, USER_REQUEST } from '../reducers/user';\nimport axios from 'axios';\naxios.defaults.baseURL = \"http://localhost:7000\";\n\nfunction logInAPI() {\n  console.log('login_api');\n  return axios.get('/api/user/login'); //다른 리소스 간에 자원공유, course orgin\n}\n\nfunction* logIn(action) {\n  console.log('login_saga');\n  console.log('login data : ', action.data);\n\n  try {\n    const result = yield call(logInAPI);\n    console.log(result.data);\n    yield put({\n      type: LOG_IN_SUCCESS //\n      //data: //result.data,\n\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_IN_FAILRUE,\n      error: 'error'\n    });\n  }\n}\n\nfunction* signup(action) {\n  console.log('signup_saga');\n  console.log('action.data not json: ', action.data);\n\n  try {\n    // const result = yield call(signupAPI, action.data)\n    yield put({\n      type: SIGNUP_SUCCESS,\n      data: null\n    });\n  } catch (error) {\n    yield put({\n      type: SIGNUP_FAILRUE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGNUP_REQUEST, signup);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchSignup)]);\n}","map":{"version":3,"sources":["D:/project/My_Web/front/sagas/user.js"],"names":["all","fork","call","put","takeLatest","LOG_IN_FAILRUE","LOG_IN_SUCCESS","LOG_IN_REQUEST","SIGNUP_REQUEST","SIGNUP_FAILRUE","SIGNUP_SUCCESSUSER_REQUEST","USER_SUCCESS","USER_FAILRUE","USER_REQUEST","axios","defaults","baseURL","logInAPI","console","log","get","logIn","action","data","result","type","error","signup","SIGNUP_SUCCESS","response","watchLogIn","watchSignup","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,SAAQC,cAAR,EAAwBC,cAAxB,EAAwCC,cAAxC,EAAwDC,cAAxD,EAAuEC,cAAvE,EAAuFC,0BAAvF,EACEC,YADF,EAEEC,YAFF,EAGEC,YAHF,QAIQ,kBAJR;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAuB,uBAAvB;;AAEA,SAASC,QAAT,GAAoB;AACnBC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,SAAOL,KAAK,CAACM,GAAN,CAAU,iBAAV,CAAP,CAFmB,CAEiB;AACpC;;AAGD,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACvBJ,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BG,MAAM,CAACC,IAApC;;AACA,MAAI;AACH,UAAMC,MAAM,GAAG,MAAMtB,IAAI,CAACe,QAAD,CAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYK,MAAM,CAACD,IAAnB;AACA,UAAMpB,GAAG,CAAC;AACTsB,MAAAA,IAAI,EAAEnB,cADG,CACa;AACtB;;AAFS,KAAD,CAAT;AAIA,GAPD,CAOE,OAAOoB,KAAP,EAAc;AACf,UAAMvB,GAAG,CAAC;AACTsB,MAAAA,IAAI,EAAEpB,cADG;AAETqB,MAAAA,KAAK,EAAE;AAFE,KAAD,CAAT;AAIA;AACD;;AAED,UAAUC,MAAV,CAAiBL,MAAjB,EAAyB;AACxBJ,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCG,MAAM,CAACC,IAA7C;;AACA,MAAI;AACH;AACA,UAAMpB,GAAG,CAAC;AACTsB,MAAAA,IAAI,EAAEG,cADG;AAETL,MAAAA,IAAI,EAAE;AAFG,KAAD,CAAT;AAIA,GAND,CAME,OAAOG,KAAP,EAAc;AACf,UAAMvB,GAAG,CAAC;AACTsB,MAAAA,IAAI,EAAEhB,cADG;AAETiB,MAAAA,KAAK,EAAEA,KAAK,CAACG,QAAN,CAAeN;AAFb,KAAD,CAAT;AAIA;AACD;;AAED,UAAUO,UAAV,GAAuB;AACtB,QAAM1B,UAAU,CAACG,cAAD,EAAiBc,KAAjB,CAAhB;AACA;;AAED,UAAUU,WAAV,GAAuB;AACtB,QAAM3B,UAAU,CAACI,cAAD,EAAiBmB,MAAjB,CAAhB;AACA;;AAED,eAAe,UAAUK,QAAV,GAAqB;AACnC,QAAMhC,GAAG,CAAC,CACTC,IAAI,CAAC6B,UAAD,CADK,EAET7B,IAAI,CAAC8B,WAAD,CAFK,CAAD,CAAT;AAIA","sourcesContent":["import { all, fork, call, put, takeLatest } from 'redux-saga/effects'\r\nimport {LOG_IN_FAILRUE, LOG_IN_SUCCESS, LOG_IN_REQUEST, SIGNUP_REQUEST,SIGNUP_FAILRUE, SIGNUP_SUCCESSUSER_REQUEST\r\n\t,USER_SUCCESS\r\n\t,USER_FAILRUE\r\n\t,USER_REQUEST\r\n\t} from '../reducers/user'\r\n\r\nimport axios from 'axios'\r\n\r\naxios.defaults.baseURL=\"http://localhost:7000\"\r\n\r\nfunction logInAPI() {\r\n\tconsole.log('login_api');\r\n\treturn axios.get('/api/user/login') //다른 리소스 간에 자원공유, course orgin\r\n}\r\n\r\n\r\nfunction* logIn(action) {\r\n\tconsole.log('login_saga')\r\n\tconsole.log('login data : ', action.data)\r\n\ttry {\r\n\t\tconst result = yield call(logInAPI);\r\n\t\tconsole.log(result.data);\r\n\t\tyield put({\r\n\t\t\ttype: LOG_IN_SUCCESS,\t//\r\n\t\t\t//data: //result.data,\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: LOG_IN_FAILRUE,\r\n\t\t\terror: 'error'\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* signup(action) {\r\n\tconsole.log('signup_saga')\r\n\tconsole.log('action.data not json: ', action.data)\r\n\ttry {\r\n\t\t// const result = yield call(signupAPI, action.data)\r\n\t\tyield put({\r\n\t\t\ttype: SIGNUP_SUCCESS,\r\n\t\t\tdata: null\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: SIGNUP_FAILRUE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchLogIn() {\r\n\tyield takeLatest(LOG_IN_REQUEST, logIn)\r\n}\r\n\r\nfunction* watchSignup(){\r\n\tyield takeLatest(SIGNUP_REQUEST, signup)\r\n}\r\n\r\nexport default function* userSaga() {\r\n\tyield all([\r\n\t\tfork(watchLogIn),\r\n\t\tfork(watchSignup),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}