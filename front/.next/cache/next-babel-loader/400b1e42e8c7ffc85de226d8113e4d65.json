{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(saveCo),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(listCo),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(delCo),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(revisionCo),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAdd),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchDel),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchList),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchrevision),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(commentSaga);\n\nimport { CO_SAVE_REQUEST, CO_SAVE_SUCCESS, CO_SAVE_FAILRUE, CO_REMOVE_REQUEST, CO_REMOVE_SUCCESS, CO_REMOVE_FAILRUE, CO_LIST_REQUEST, CO_LIST_SUCCESS, CO_LIST_FAILRUE, CO_REVISION_REQUEST, CO_REVISION_SUCCESS, CO_REVISION_FAILRUE } from '../reducers/comment';\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction Co_listAPi() {\n  return axios.get(\"/api/post/:\".concat(body.postid));\n}\n\n_c = Co_listAPi;\n\nfunction Add_coAPi() {\n  return axios.post('/api/post/add', body);\n}\n\n_c2 = Add_coAPi;\n\nfunction Del_coAPi() {\n  return axios[\"delete\"](\"/api/post/:\".concat(body.id));\n}\n\n_c3 = Del_coAPi;\n\nfunction Revision_coApi() {\n  return axios.put(\"/api/post/:\".concat(body.id), body);\n}\n\n_c4 = Revision_coApi;\n\nfunction saveCo(action) {\n  return _regeneratorRuntime.wrap(function saveCo$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('Cosave_saga');\n          console.log('action.data in saveSaga: ', action.data); //{Co object}\n\n          _context.prev = 2;\n          _context.next = 5;\n          return put({\n            type: CO_SAVE_SUCCESS,\n            //\n            data: null\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](2);\n          _context.next = 11;\n          return put({\n            type: CO_SAVE_FAILRUE,\n            error: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 7]]);\n}\n\nfunction listCo(action) {\n  return _regeneratorRuntime.wrap(function listCo$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log('Colist_saga');\n          console.log('postid : ' + action.data);\n          _context2.prev = 2;\n          _context2.next = 5;\n          return put({\n            type: CO_LIST_SUCCESS,\n            //\n            data: //result.data\n            [{\n              id: 0,\n              userid: 0,\n              postid: 0,\n              contents: '좋은 리뷰입니다.',\n              like: 2,\n              dislike: 1\n            }, {\n              id: 1,\n              userid: 2,\n              postid: 0,\n              contents: '좋은 리뷰아닙니다.',\n              like: 2,\n              dislike: 1\n            }]\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](2);\n          _context2.next = 11;\n          return put({\n            type: CO_LIST_FAILRUE,\n            error: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[2, 7]]);\n}\n\nfunction delCo(action) {\n  return _regeneratorRuntime.wrap(function delCo$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log('delco_saga');\n          console.log('action.data in deletesaga: ', action.data);\n          _context3.prev = 2;\n          _context3.next = 5;\n          return put({\n            type: CO_REMOVE_SUCCESS,\n            data: null\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](2);\n          _context3.next = 11;\n          return put({\n            type: CO_REMOVE_FAILRUE,\n            error: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[2, 7]]);\n}\n\nfunction revisionCo(action) {\n  return _regeneratorRuntime.wrap(function revisionCo$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          console.log('revisionCo_saga');\n          console.log('action.data in revision saga ', action.data);\n          _context4.prev = 2;\n          _context4.next = 5;\n          return put({\n            type: CO_REVISION_SUCCESS,\n            data: null\n          });\n\n        case 5:\n          _context4.next = 11;\n          break;\n\n        case 7:\n          _context4.prev = 7;\n          _context4.t0 = _context4[\"catch\"](2);\n          _context4.next = 11;\n          return put({\n            type: CO_REVISION_FAILRUE,\n            error: _context4.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[2, 7]]);\n}\n\nfunction watchAdd() {\n  return _regeneratorRuntime.wrap(function watchAdd$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(CO_SAVE_REQUEST, saveCo);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchDel() {\n  return _regeneratorRuntime.wrap(function watchDel$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(CO_REMOVE_REQUEST, delCo);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchList() {\n  return _regeneratorRuntime.wrap(function watchList$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(CO_LIST_REQUEST, listCo);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchrevision() {\n  return _regeneratorRuntime.wrap(function watchrevision$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(CO_REVISION_REQUEST, revisionCo);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function commentSaga() {\n  return _regeneratorRuntime.wrap(function commentSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAdd), fork(watchDel), fork(watchList), fork(watchrevision)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Co_listAPi\");\n$RefreshReg$(_c2, \"Add_coAPi\");\n$RefreshReg$(_c3, \"Del_coAPi\");\n$RefreshReg$(_c4, \"Revision_coApi\");","map":{"version":3,"sources":["D:/project/Kit-Diary/front/sagas/comment.js"],"names":["saveCo","listCo","delCo","revisionCo","watchAdd","watchDel","watchList","watchrevision","commentSaga","CO_SAVE_REQUEST","CO_SAVE_SUCCESS","CO_SAVE_FAILRUE","CO_REMOVE_REQUEST","CO_REMOVE_SUCCESS","CO_REMOVE_FAILRUE","CO_LIST_REQUEST","CO_LIST_SUCCESS","CO_LIST_FAILRUE","CO_REVISION_REQUEST","CO_REVISION_SUCCESS","CO_REVISION_FAILRUE","all","fork","call","put","takeLatest","axios","Co_listAPi","get","body","postid","Add_coAPi","post","Del_coAPi","id","Revision_coApi","action","console","log","data","type","error","response","userid","contents","like","dislike"],"mappings":"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","sourcesContent":["import {\r\n  CO_SAVE_REQUEST,\r\n  CO_SAVE_SUCCESS,\r\n  CO_SAVE_FAILRUE,\r\n\r\n  CO_REMOVE_REQUEST,\r\n  CO_REMOVE_SUCCESS,\r\n  CO_REMOVE_FAILRUE,\r\n\r\n\r\n  CO_LIST_REQUEST,\r\n  CO_LIST_SUCCESS,\r\n  CO_LIST_FAILRUE,\r\n\r\n  CO_REVISION_REQUEST,\r\n  CO_REVISION_SUCCESS,\r\n  CO_REVISION_FAILRUE,\r\n} from '../reducers/comment'\r\n\r\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\n\r\n\r\nfunction Co_listAPi() {\r\n\treturn axios.get(`/api/post/:${body.postid}`) \r\n}\r\n\r\nfunction Add_coAPi() {\r\n\treturn axios.post('/api/post/add', body) \r\n}\r\nfunction Del_coAPi() {\r\n\treturn axios.delete(`/api/post/:${body.id}`); \r\n}\r\nfunction Revision_coApi(){\r\n\treturn axios.put(`/api/post/:${body.id}`, body)\r\n}\r\n\r\n\r\n\r\nfunction* saveCo(action) {\r\n  console.log('Cosave_saga')\r\n  console.log('action.data in saveSaga: ', action.data) //{Co object}\r\n\r\n\ttry {\r\n\t\t//const result = yield call(Add_coAPi,action.data)\r\n\t\tyield put({\r\n\t\t\ttype: CO_SAVE_SUCCESS,\t//\r\n      data: null,\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: CO_SAVE_FAILRUE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* listCo(action) {\r\n\tconsole.log('Colist_saga')\r\n\tconsole.log('postid : ' + action.data);\r\n\ttry {\r\n\t\t//const result = yield call(Co_listAPi)\r\n\t\tyield put({\r\n\t\t\ttype: CO_LIST_SUCCESS,\t//\r\n      data: //result.data\r\n      [\r\n        {\r\n          id:0,\r\n          userid:0,\r\n          postid:0,\r\n          \r\n          contents:'좋은 리뷰입니다.',\r\n          like:2,\r\n          dislike:1,\r\n        },\r\n        {\r\n          id:1,\r\n          userid:2,\r\n          postid:0,\r\n          \r\n          contents:'좋은 리뷰아닙니다.',\r\n          like:2,\r\n          dislike:1,\r\n        },\r\n      ]\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: CO_LIST_FAILRUE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* delCo(action) {\r\n\tconsole.log('delco_saga')\r\n\tconsole.log('action.data in deletesaga: ', action.data)\r\n\ttry {\r\n\t\t//const result = yield call(Del_coAPi, action.data) //ex {id:3, postid:2}\r\n\t\tyield put({\r\n\t\t\ttype: CO_REMOVE_SUCCESS,\t\r\n\t\t\tdata: null\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: CO_REMOVE_FAILRUE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\n\r\nfunction* revisionCo(action) {\r\n\tconsole.log('revisionCo_saga')\r\n\tconsole.log('action.data in revision saga ', action.data)\r\n\ttry {\r\n\t//\tconst result = yield call(Revision_coApi, action.data) //{post object};\r\n\t\tyield put({\r\n\t\t\ttype: CO_REVISION_SUCCESS,\r\n\t\t\tdata: null,\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: CO_REVISION_FAILRUE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\nfunction* watchAdd() {\r\n\tyield takeLatest(CO_SAVE_REQUEST, saveCo)\r\n}\r\n\r\nfunction* watchDel(){\r\n\tyield takeLatest(CO_REMOVE_REQUEST, delCo)\r\n}\r\n\r\nfunction* watchList(){\r\n  yield takeLatest(CO_LIST_REQUEST, listCo)\r\n}\r\n\r\nfunction* watchrevision(){\r\n\tyield takeLatest(CO_REVISION_REQUEST, revisionCo)\r\n}\r\n\r\n\r\n\r\n\r\nexport default function* commentSaga() {\r\n\tyield all([\r\n\t\tfork(watchAdd),\r\n    fork(watchDel),\r\n\t\tfork(watchList),\r\n\t\tfork(watchrevision),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}