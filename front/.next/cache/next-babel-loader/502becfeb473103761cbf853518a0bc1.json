{"ast":null,"code":"import { CO_SAVE_REQUEST, CO_SAVE_SUCCESS, CO_SAVE_FAILRUE, CO_REMOVE_REQUEST, CO_REMOVE_SUCCESS, CO_REMOVE_FAILRUE, CO_LIST_REQUEST, CO_LIST_SUCCESS, CO_LIST_FAILRUE, CO_REVISION_REQUEST, CO_REVISION_SUCCESS, CO_REVISION_FAILRUE } from '../reducers/comment';\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction Co_listAPi() {\n  return axios.get(`/api/post/:${body.postid}`);\n}\n\nfunction Add_coAPi() {\n  return axios.post('/api/post/add', body);\n}\n\nfunction Del_coAPi() {\n  return axios.delete(`/api/post/:${body.id}`);\n}\n\nfunction Revision_coApi() {\n  return axios.put(`/api/post/:${body.id}`, body);\n}\n\nfunction* saveCo(action) {\n  console.log('Cosave_saga');\n  console.log('action.data in saveSaga: ', action.data); //{Co object}\n\n  try {\n    //const result = yield call(Add_coAPi,action.data)\n    yield put({\n      type: CO_SAVE_SUCCESS,\n      //\n      data: null\n    });\n  } catch (error) {\n    yield put({\n      type: CO_SAVE_FAILRUE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* listCo(action) {\n  console.log('Colist_saga');\n  console.log('postid : ' + action.data);\n\n  try {\n    //const result = yield call(Co_listAPi)\n    yield put({\n      type: CO_LIST_SUCCESS,\n      //\n      data: //result.data\n      [{\n        id: 0,\n        userid: 0,\n        postid: 0,\n        contents: '좋은 리뷰입니다.',\n        like: 2,\n        dislike: 1\n      }, {\n        id: 1,\n        userid: 2,\n        postid: 0,\n        contents: '좋은 리뷰아닙니다.',\n        like: 2,\n        dislike: 1\n      }]\n    });\n  } catch (error) {\n    yield put({\n      type: CO_LIST_FAILRUE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* delCo(action) {\n  console.log('delco_saga');\n  console.log('action.data in deletesaga: ', action.data);\n\n  try {\n    //const result = yield call(Del_coAPi, action.data) //ex {id:3, postid:2}\n    yield put({\n      type: CO_REMOVE_SUCCESS,\n      data: null\n    });\n  } catch (error) {\n    yield put({\n      type: CO_REMOVE_FAILRUE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* revisionCo(action) {\n  console.log('revisionCo_saga');\n  console.log('action.data in revision saga ', action.data);\n\n  try {\n    //\tconst result = yield call(Revision_coApi, action.data) //{post object};\n    yield put({\n      type: CO_REVISION_SUCCESS,\n      data: null\n    });\n  } catch (error) {\n    yield put({\n      type: CO_REVISION_FAILRUE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchAdd() {\n  yield takeLatest(CO_SAVE_REQUEST, saveCo);\n}\n\nfunction* watchDel() {\n  yield takeLatest(POST_REMOVE_REQUEST, delCo);\n}\n\nfunction* watchList() {\n  yield takeLatest(CO_LIST_REQUEST, listCo);\n}\n\nfunction* watchrevision() {\n  yield takeLatest(CO_REVISION_REQUEST, revisionCo);\n}\n\nexport default function* commentSaga() {\n  yield all([fork(watchAdd), fork(watchDel), fork(watchList), fork(watchrevision)]);\n}","map":{"version":3,"sources":["D:/project/Kit-Diary/front/sagas/comment.js"],"names":["CO_SAVE_REQUEST","CO_SAVE_SUCCESS","CO_SAVE_FAILRUE","CO_REMOVE_REQUEST","CO_REMOVE_SUCCESS","CO_REMOVE_FAILRUE","CO_LIST_REQUEST","CO_LIST_SUCCESS","CO_LIST_FAILRUE","CO_REVISION_REQUEST","CO_REVISION_SUCCESS","CO_REVISION_FAILRUE","all","fork","call","put","takeLatest","axios","Co_listAPi","get","body","postid","Add_coAPi","post","Del_coAPi","delete","id","Revision_coApi","saveCo","action","console","log","data","type","error","response","listCo","userid","contents","like","dislike","delCo","revisionCo","watchAdd","watchDel","POST_REMOVE_REQUEST","watchList","watchrevision","commentSaga"],"mappings":"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","sourcesContent":["import {\r\n  CO_SAVE_REQUEST,\r\n  CO_SAVE_SUCCESS,\r\n  CO_SAVE_FAILRUE,\r\n\r\n  CO_REMOVE_REQUEST,\r\n  CO_REMOVE_SUCCESS,\r\n  CO_REMOVE_FAILRUE,\r\n\r\n\r\n  CO_LIST_REQUEST,\r\n  CO_LIST_SUCCESS,\r\n  CO_LIST_FAILRUE,\r\n\r\n  CO_REVISION_REQUEST,\r\n  CO_REVISION_SUCCESS,\r\n  CO_REVISION_FAILRUE,\r\n} from '../reducers/comment'\r\n\r\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects'\r\nimport axios from 'axios'\r\n\r\n\r\nfunction Co_listAPi() {\r\n\treturn axios.get(`/api/post/:${body.postid}`) \r\n}\r\n\r\nfunction Add_coAPi() {\r\n\treturn axios.post('/api/post/add', body) \r\n}\r\nfunction Del_coAPi() {\r\n\treturn axios.delete(`/api/post/:${body.id}`); \r\n}\r\nfunction Revision_coApi(){\r\n\treturn axios.put(`/api/post/:${body.id}`, body)\r\n}\r\n\r\n\r\n\r\nfunction* saveCo(action) {\r\n  console.log('Cosave_saga')\r\n  console.log('action.data in saveSaga: ', action.data) //{Co object}\r\n\r\n\ttry {\r\n\t\t//const result = yield call(Add_coAPi,action.data)\r\n\t\tyield put({\r\n\t\t\ttype: CO_SAVE_SUCCESS,\t//\r\n      data: null,\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: CO_SAVE_FAILRUE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* listCo(action) {\r\n\tconsole.log('Colist_saga')\r\n\tconsole.log('postid : ' + action.data);\r\n\ttry {\r\n\t\t//const result = yield call(Co_listAPi)\r\n\t\tyield put({\r\n\t\t\ttype: CO_LIST_SUCCESS,\t//\r\n      data: //result.data\r\n      [\r\n        {\r\n          id:0,\r\n          userid:0,\r\n          postid:0,\r\n          \r\n          contents:'좋은 리뷰입니다.',\r\n          like:2,\r\n          dislike:1,\r\n        },\r\n        {\r\n          id:1,\r\n          userid:2,\r\n          postid:0,\r\n          \r\n          contents:'좋은 리뷰아닙니다.',\r\n          like:2,\r\n          dislike:1,\r\n        },\r\n      ]\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: CO_LIST_FAILRUE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* delCo(action) {\r\n\tconsole.log('delco_saga')\r\n\tconsole.log('action.data in deletesaga: ', action.data)\r\n\ttry {\r\n\t\t//const result = yield call(Del_coAPi, action.data) //ex {id:3, postid:2}\r\n\t\tyield put({\r\n\t\t\ttype: CO_REMOVE_SUCCESS,\t\r\n\t\t\tdata: null\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: CO_REMOVE_FAILRUE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\n\r\nfunction* revisionCo(action) {\r\n\tconsole.log('revisionCo_saga')\r\n\tconsole.log('action.data in revision saga ', action.data)\r\n\ttry {\r\n\t//\tconst result = yield call(Revision_coApi, action.data) //{post object};\r\n\t\tyield put({\r\n\t\t\ttype: CO_REVISION_SUCCESS,\r\n\t\t\tdata: null,\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: CO_REVISION_FAILRUE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\nfunction* watchAdd() {\r\n\tyield takeLatest(CO_SAVE_REQUEST, saveCo)\r\n}\r\n\r\nfunction* watchDel(){\r\n\tyield takeLatest(POST_REMOVE_REQUEST, delCo)\r\n}\r\n\r\nfunction* watchList(){\r\n  yield takeLatest(CO_LIST_REQUEST, listCo)\r\n}\r\n\r\nfunction* watchrevision(){\r\n\tyield takeLatest(CO_REVISION_REQUEST, revisionCo)\r\n}\r\n\r\n\r\n\r\n\r\nexport default function* commentSaga() {\r\n\tyield all([\r\n\t\tfork(watchAdd),\r\n    fork(watchDel),\r\n\t\tfork(watchList),\r\n\t\tfork(watchrevision),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}