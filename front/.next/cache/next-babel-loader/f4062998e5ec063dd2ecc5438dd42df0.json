{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(signup),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignup),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport { LOG_IN_FAILRUE, LOG_IN_SUCCESS, LOG_IN_REQUEST, SIGNUP_REQUEST, SIGNUP_FAILRUE, SIGNUP_SUCCESSUSER_REQUEST, USER_SUCCESS, USER_FAILRUE, USER_REQUEST } from '../reducers/user';\nimport axios from 'axios';\naxios.defaults.baseURL = \"http://localhost:7000\";\n\nfunction logInAPI() {\n  console.log('login_api');\n  return axios.post('/api/user/login', body); //다른 리소스 간에 자원공유, course orgin\n}\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          console.log('login_saga');\n          console.log('login data : ', action.data);\n          _context.prev = 2;\n          _context.next = 5;\n          return call(logInAPI, action.data);\n\n        case 5:\n          result = _context.sent;\n          console.log(result.data);\n          _context.next = 9;\n          return put({\n            type: LOG_IN_SUCCESS //\n            //data: //result.data,\n\n          });\n\n        case 9:\n          _context.next = 15;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](2);\n          _context.next = 15;\n          return put({\n            type: LOG_IN_FAILRUE,\n            error: 'error'\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 11]]);\n}\n\nfunction signup(action) {\n  return _regeneratorRuntime.wrap(function signup$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log('signup_saga');\n          console.log('action.data not json: ', action.data);\n          _context2.prev = 2;\n          _context2.next = 5;\n          return put({\n            type: SIGNUP_SUCCESS,\n            data: null\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](2);\n          _context2.next = 11;\n          return put({\n            type: SIGNUP_FAILRUE,\n            error: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[2, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchSignup() {\n  return _regeneratorRuntime.wrap(function watchSignup$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(SIGNUP_REQUEST, signup);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchSignup)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["D:/project/My_Web/front/sagas/user.js"],"names":["logIn","signup","watchLogIn","watchSignup","userSaga","all","fork","call","put","takeLatest","LOG_IN_FAILRUE","LOG_IN_SUCCESS","LOG_IN_REQUEST","SIGNUP_REQUEST","SIGNUP_FAILRUE","SIGNUP_SUCCESSUSER_REQUEST","USER_SUCCESS","USER_FAILRUE","USER_REQUEST","axios","defaults","baseURL","logInAPI","console","log","post","body","action","data","result","type","error","SIGNUP_SUCCESS","response"],"mappings":";;oDAiBUA,K;qDAkBAC,M;qDAiBAC,U;qDAIAC,W;qDAIeC,Q;;AA5DzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,SAAQC,cAAR,EAAwBC,cAAxB,EAAwCC,cAAxC,EAAwDC,cAAxD,EAAuEC,cAAvE,EAAuFC,0BAAvF,EACEC,YADF,EAEEC,YAFF,EAGEC,YAHF,QAIQ,kBAJR;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAuB,uBAAvB;;AAEA,SAASC,QAAT,GAAoB;AACnBC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,SAAOL,KAAK,CAACM,IAAN,CAAW,iBAAX,EAA8BC,IAA9B,CAAP,CAFmB,CAEwB;AAC3C;;AAGD,SAAU1B,KAAV,CAAgB2B,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACCJ,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BG,MAAM,CAACC,IAApC;AAFD;AAAA;AAIiB,iBAAMrB,IAAI,CAACe,QAAD,EAAUK,MAAM,CAACC,IAAjB,CAAV;;AAJjB;AAIQC,UAAAA,MAJR;AAKEN,UAAAA,OAAO,CAACC,GAAR,CAAYK,MAAM,CAACD,IAAnB;AALF;AAME,iBAAMpB,GAAG,CAAC;AACTsB,YAAAA,IAAI,EAAEnB,cADG,CACa;AACtB;;AAFS,WAAD,CAAT;;AANF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWE,iBAAMH,GAAG,CAAC;AACTsB,YAAAA,IAAI,EAAEpB,cADG;AAETqB,YAAAA,KAAK,EAAE;AAFE,WAAD,CAAT;;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAU9B,MAAV,CAAiB0B,MAAjB;AAAA;AAAA;AAAA;AAAA;AACCJ,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCG,MAAM,CAACC,IAA7C;AAFD;AAAA;AAKE,iBAAMpB,GAAG,CAAC;AACTsB,YAAAA,IAAI,EAAEE,cADG;AAETJ,YAAAA,IAAI,EAAE;AAFG,WAAD,CAAT;;AALF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUE,iBAAMpB,GAAG,CAAC;AACTsB,YAAAA,IAAI,EAAEhB,cADG;AAETiB,YAAAA,KAAK,EAAE,aAAME,QAAN,CAAeL;AAFb,WAAD,CAAT;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAU1B,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMO,UAAU,CAACG,cAAD,EAAiBZ,KAAjB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,iBAAMM,UAAU,CAACI,cAAD,EAAiBZ,MAAjB,CAAhB;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACd,iBAAMC,GAAG,CAAC,CACTC,IAAI,CAACJ,UAAD,CADK,EAETI,IAAI,CAACH,WAAD,CAFK,CAAD,CAAT;;AADc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, call, put, takeLatest } from 'redux-saga/effects'\r\nimport {LOG_IN_FAILRUE, LOG_IN_SUCCESS, LOG_IN_REQUEST, SIGNUP_REQUEST,SIGNUP_FAILRUE, SIGNUP_SUCCESSUSER_REQUEST\r\n\t,USER_SUCCESS\r\n\t,USER_FAILRUE\r\n\t,USER_REQUEST\r\n\t} from '../reducers/user'\r\n\r\nimport axios from 'axios'\r\n\r\naxios.defaults.baseURL=\"http://localhost:7000\"\r\n\r\nfunction logInAPI() {\r\n\tconsole.log('login_api');\r\n\treturn axios.post('/api/user/login', body) //다른 리소스 간에 자원공유, course orgin\r\n}\r\n\r\n\r\nfunction* logIn(action) {\r\n\tconsole.log('login_saga')\r\n\tconsole.log('login data : ', action.data)\r\n\ttry {\r\n\t\tconst result = yield call(logInAPI,action.data);\r\n\t\tconsole.log(result.data);\r\n\t\tyield put({\r\n\t\t\ttype: LOG_IN_SUCCESS,\t//\r\n\t\t\t//data: //result.data,\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: LOG_IN_FAILRUE,\r\n\t\t\terror: 'error'\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* signup(action) {\r\n\tconsole.log('signup_saga')\r\n\tconsole.log('action.data not json: ', action.data)\r\n\ttry {\r\n\t\t// const result = yield call(signupAPI, action.data)\r\n\t\tyield put({\r\n\t\t\ttype: SIGNUP_SUCCESS,\r\n\t\t\tdata: null\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: SIGNUP_FAILRUE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchLogIn() {\r\n\tyield takeLatest(LOG_IN_REQUEST, logIn)\r\n}\r\n\r\nfunction* watchSignup(){\r\n\tyield takeLatest(SIGNUP_REQUEST, signup)\r\n}\r\n\r\nexport default function* userSaga() {\r\n\tyield all([\r\n\t\tfork(watchLogIn),\r\n\t\tfork(watchSignup),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}