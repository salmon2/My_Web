{"ast":null,"code":"import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport { LOG_IN_FAILRUE, LOG_IN_SUCCESS, LOG_IN_REQUEST, SIGNUP_REQUEST, SIGNUP_FAILRUE, SIGNUP_SUCCESSUSER_REQUEST, USER_SUCCESS, USER_FAILRUE, USER_REQUEST } from '../reducers/user';\nimport axios from 'axios';\naxios.defaults.baseURL = \"http://localhost:7000\";\n\nfunction logInAPI(body) {\n  console.log('login_api');\n  console.log('body', body);\n  return axios.post('/api/user/login', body); //다른 리소스 간에 자원공유, course orgin\n}\n\nfunction signupAPI(body) {\n  console.log('join_api');\n  console.log('body', body);\n  return axios.post('/api/user/join', body);\n}\n\nfunction* logIn(action) {\n  console.log('login_saga');\n  console.log('login data : ', action.data);\n\n  try {\n    const result = yield call(logInAPI, action.data);\n    console.log(result.data);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n    console.log('put error');\n  } catch (err) {\n    console.log('err');\n  }\n}\n\nfunction* signup(action) {\n  console.log('signup_saga');\n  console.log('action.data not json: ', action.data);\n\n  try {\n    const result = yield call(signupAPI, action.data);\n    yield put({\n      type: SIGNUP_SUCCESS,\n      data: null\n    });\n  } catch (error) {\n    yield put({\n      type: SIGNUP_FAILRUE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGNUP_REQUEST, signup);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchSignup)]);\n}","map":{"version":3,"sources":["D:/project/My_Web/front/sagas/user.js"],"names":["all","fork","call","put","takeLatest","LOG_IN_FAILRUE","LOG_IN_SUCCESS","LOG_IN_REQUEST","SIGNUP_REQUEST","SIGNUP_FAILRUE","SIGNUP_SUCCESSUSER_REQUEST","USER_SUCCESS","USER_FAILRUE","USER_REQUEST","axios","defaults","baseURL","logInAPI","body","console","log","post","signupAPI","logIn","action","data","result","type","err","signup","SIGNUP_SUCCESS","error","response","watchLogIn","watchSignup","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,SAAQC,cAAR,EAAwBC,cAAxB,EAAwCC,cAAxC,EAAwDC,cAAxD,EAAuEC,cAAvE,EAAuFC,0BAAvF,EACEC,YADF,EAEEC,YAFF,EAGEC,YAHF,QAIQ,kBAJR;AAMA,OAAOC,KAAP,MAAkB,OAAlB;AAEAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAuB,uBAAvB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;AACA,SAAOJ,KAAK,CAACO,IAAN,CAAW,iBAAX,EAA8BH,IAA9B,CAAP,CAHuB,CAGoB;AAC3C;;AAED,SAASI,SAAT,CAAmBJ,IAAnB,EAAwB;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;AACA,SAAOJ,KAAK,CAACO,IAAN,CAAW,gBAAX,EAA6BH,IAA7B,CAAP;AACA;;AAED,UAAUK,KAAV,CAAgBC,MAAhB,EAAwB;AACvBL,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BI,MAAM,CAACC,IAApC;;AACA,MAAI;AACH,UAAMC,MAAM,GAAG,MAAMxB,IAAI,CAACe,QAAD,EAAWO,MAAM,CAACC,IAAlB,CAAzB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYM,MAAM,CAACD,IAAnB;AACA,UAAMtB,GAAG,CAAC;AACTwB,MAAAA,IAAI,EAAErB;AADG,KAAD,CAAT;AAGAa,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACbT,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA;AACD;;AAED,UAAUS,MAAV,CAAiBL,MAAjB,EAAyB;AACxBL,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCI,MAAM,CAACC,IAA7C;;AACA,MAAI;AACH,UAAMC,MAAM,GAAG,MAAMxB,IAAI,CAACoB,SAAD,EAAYE,MAAM,CAACC,IAAnB,CAAzB;AACA,UAAMtB,GAAG,CAAC;AACTwB,MAAAA,IAAI,EAAEG,cADG;AAETL,MAAAA,IAAI,EAAE;AAFG,KAAD,CAAT;AAIA,GAND,CAME,OAAOM,KAAP,EAAc;AACf,UAAM5B,GAAG,CAAC;AACTwB,MAAAA,IAAI,EAAElB,cADG;AAETsB,MAAAA,KAAK,EAAEA,KAAK,CAACC,QAAN,CAAeP;AAFb,KAAD,CAAT;AAIA;AACD;;AAED,UAAUQ,UAAV,GAAuB;AACtB,QAAM7B,UAAU,CAACG,cAAD,EAAiBgB,KAAjB,CAAhB;AACA;;AAED,UAAUW,WAAV,GAAuB;AACtB,QAAM9B,UAAU,CAACI,cAAD,EAAiBqB,MAAjB,CAAhB;AACA;;AAED,eAAe,UAAUM,QAAV,GAAqB;AACnC,QAAMnC,GAAG,CAAC,CACTC,IAAI,CAACgC,UAAD,CADK,EAEThC,IAAI,CAACiC,WAAD,CAFK,CAAD,CAAT;AAIA","sourcesContent":["import { all, fork, call, put, takeLatest } from 'redux-saga/effects'\r\nimport {LOG_IN_FAILRUE, LOG_IN_SUCCESS, LOG_IN_REQUEST, SIGNUP_REQUEST,SIGNUP_FAILRUE, SIGNUP_SUCCESSUSER_REQUEST\r\n\t,USER_SUCCESS\r\n\t,USER_FAILRUE\r\n\t,USER_REQUEST\r\n\t} from '../reducers/user'\r\n\r\nimport axios from 'axios'\r\n\r\naxios.defaults.baseURL=\"http://localhost:7000\"\r\n\r\nfunction logInAPI(body) {\r\n\tconsole.log('login_api');\r\n\tconsole.log('body', body);\r\n\treturn axios.post('/api/user/login', body) //다른 리소스 간에 자원공유, course orgin\r\n}\r\n\r\nfunction signupAPI(body){\r\n\tconsole.log('join_api');\r\n\tconsole.log('body', body);\r\n\treturn axios.post('/api/user/join', body)\r\n}\r\n\r\nfunction* logIn(action) {\r\n\tconsole.log('login_saga')\r\n\tconsole.log('login data : ', action.data)\r\n\ttry {\r\n\t\tconst result = yield call(logInAPI, action.data);\r\n\t\tconsole.log(result.data);\r\n\t\tyield put({\r\n\t\t\ttype: LOG_IN_SUCCESS\r\n\t\t})\r\n\t\tconsole.log('put error')\r\n\t} catch (err) {\r\n\t\tconsole.log('err')\r\n\t}\r\n}\r\n\r\nfunction* signup(action) {\r\n\tconsole.log('signup_saga')\r\n\tconsole.log('action.data not json: ', action.data)\r\n\ttry {\r\n\t\tconst result = yield call(signupAPI, action.data)\r\n\t\tyield put({\r\n\t\t\ttype: SIGNUP_SUCCESS,\r\n\t\t\tdata: null\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: SIGNUP_FAILRUE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchLogIn() {\r\n\tyield takeLatest(LOG_IN_REQUEST, logIn)\r\n}\r\n\r\nfunction* watchSignup(){\r\n\tyield takeLatest(SIGNUP_REQUEST, signup)\r\n}\r\n\r\nexport default function* userSaga() {\r\n\tyield all([\r\n\t\tfork(watchLogIn),\r\n\t\tfork(watchSignup),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}