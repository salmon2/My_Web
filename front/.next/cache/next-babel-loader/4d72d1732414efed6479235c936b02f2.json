{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\Kit-Diary\\\\front\\\\components\\\\common\\\\pagination.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport _ from 'lodash';\n\nconst Pagination = props => {\n  const {\n    itemsCount,\n    pageSize,\n    currentPage,\n    onPageChange\n  } = props;\n  const pageCount = Math.ceil(itemsCount / pageSize);\n  if (pageCount === 1) return null;\n\n  const pages = _.range(1, pageCount + 1);\n\n  return __jsx(\"nav\", {\n    style: {\n      marginLeft: \"50%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, __jsx(\"ul\", {\n    className: \"pagination\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }\n  }, pages.map(page => __jsx(\"li\", {\n    key: page,\n    className: page === currentPage ? \"page-item active\" : \"page-item\" // Bootstrap을 이용하여 현재 페이지를 시각적으로 표시\n    ,\n    style: {\n      cursor: \"pointer\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 11\n    }\n  }, __jsx(\"a\", {\n    className: \"page-link\",\n    onClick: () => onPageChange(page),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, page), \" \"))));\n};\n\nexport default Pagination;","map":{"version":3,"sources":["D:/project/Kit-Diary/front/components/common/pagination.jsx"],"names":["React","_","Pagination","props","itemsCount","pageSize","currentPage","onPageChange","pageCount","Math","ceil","pages","range","marginLeft","map","page","cursor"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA,WAAxB;AAAqCC,IAAAA;AAArC,MAAsDJ,KAA5D;AACA,QAAMK,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUN,UAAU,GAAGC,QAAvB,CAAlB;AAEA,MAAIG,SAAS,KAAK,CAAlB,EAAqB,OAAO,IAAP;;AAErB,QAAMG,KAAK,GAAGV,CAAC,CAACW,KAAF,CAAQ,CAAR,EAAWJ,SAAS,GAAG,CAAvB,CAAd;;AAEA,SACE;AAAK,IAAA,KAAK,EAAE;AAAEK,MAAAA,UAAU,EAAC;AAAb,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,KAAK,CAACG,GAAN,CAAUC,IAAI,IACb;AACE,IAAA,GAAG,EAAEA,IADP;AAEE,IAAA,SAAS,EAAEA,IAAI,KAAKT,WAAT,GAAuB,kBAAvB,GAA4C,WAFzD,CAEsE;AAFtE;AAGE,IAAA,KAAK,EAAE;AAAEU,MAAAA,MAAM,EAAE;AAAV,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAG,IAAA,SAAS,EAAC,WAAb;AAAyB,IAAA,OAAO,EAAE,MAAMT,YAAY,CAACQ,IAAD,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6DA,IAA7D,CALF,MADD,CADH,CADF,CADF;AAeD,CAvBD;;AAyBA,eAAeb,UAAf","sourcesContent":["import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nconst Pagination = (props) => {\r\n  const { itemsCount, pageSize, currentPage, onPageChange } = props;\r\n  const pageCount = Math.ceil(itemsCount / pageSize);\r\n\r\n  if (pageCount === 1) return null;\r\n\r\n  const pages = _.range(1, pageCount + 1);\r\n\r\n  return (\r\n    <nav style={{ marginLeft:\"50%\" }}>\r\n      <ul className=\"pagination\">\r\n        {pages.map(page => (\r\n          <li\r\n            key={page}\r\n            className={page === currentPage ? \"page-item active\" : \"page-item\"} // Bootstrap을 이용하여 현재 페이지를 시각적으로 표시\r\n            style={{ cursor: \"pointer\" }}\r\n          >\r\n            <a className=\"page-link\" onClick={() => onPageChange(page)}>{page}</a> {/* 페이지 번호 클릭 이벤트 처리기 지정 */}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Pagination;"]},"metadata":{},"sourceType":"module"}