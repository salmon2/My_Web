{"ast":null,"code":"import { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport { LOG_IN_FAILRUE, LOG_IN_SUCCESS, LOG_IN_REQUEST, SIGNUP_REQUEST, SIGNUP_FAILRUE, SIGNUP_SUCCESSUSER_REQUEST, USER_SUCCESS, USER_FAILRUE, USER_REQUEST } from '../reducers/user';\nimport axios from 'axios';\naxios.defaults.baseURL = \"http://localhost:4000\";\n\nfunction logInAPI() {\n  return axios.post('/api/user/login', body); //다른 리소스 간에 자원공유, course orgin\n}\n\nfunction signupAPI() {\n  return axios.post('/api/user/join', body);\n}\n\nfunction userAPI() {\n  return axios.get(`/api/user/:${body}`);\n}\n\nfunction* userinfo(action) {\n  console.log('user_saga');\n  console.log('action.data not json: ', action.data.userid);\n\n  try {\n    //const result = yield call(userAPI, action.data.userid)\n    yield put({\n      type: USER_SUCCESS,\n      //\n      data: //result.data\n      {\n        id: '2',\n        //primary key\n        email: 'asdf@asdf',\n        password: 'asdf',\n        stdnum: 123123,\n        major: 'asdf',\n        nickname: 'asdfasdf'\n      }\n    });\n  } catch (error) {\n    yield put({\n      type: USER_FAILRUE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* logIn(action) {\n  console.log('login_saga');\n  console.log('login data : ', action.data);\n\n  try {\n    const result = yield call(logInAPI, action.data);\n    console.log(result.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      //\n      data: result.data\n    });\n  } catch (error) {\n    yield put({\n      type: LOG_IN_FAILRUE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* signup(action) {\n  console.log('signup_saga');\n  console.log('action.data not json: ', action.data);\n\n  try {\n    // const result = yield call(signupAPI, action.data)\n    yield put({\n      type: SIGNUP_SUCCESS,\n      data: null\n    });\n  } catch (error) {\n    yield put({\n      type: SIGNUP_FAILRUE,\n      error: error.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGNUP_REQUEST, signup);\n}\n\nfunction* watchUser() {\n  yield takeLatest(USER_REQUEST, userinfo);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchSignup), fork(watchUser)]);\n}","map":{"version":3,"sources":["D:/project/My_Web/front/sagas/user.js"],"names":["all","fork","call","put","takeLatest","LOG_IN_FAILRUE","LOG_IN_SUCCESS","LOG_IN_REQUEST","SIGNUP_REQUEST","SIGNUP_FAILRUE","SIGNUP_SUCCESSUSER_REQUEST","USER_SUCCESS","USER_FAILRUE","USER_REQUEST","axios","defaults","baseURL","logInAPI","post","body","signupAPI","userAPI","get","userinfo","action","console","log","data","userid","type","id","email","password","stdnum","major","nickname","error","response","logIn","result","signup","SIGNUP_SUCCESS","watchLogIn","watchSignup","watchUser","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, call, put, takeLatest } from 'redux-saga/effects'\r\nimport {LOG_IN_FAILRUE, LOG_IN_SUCCESS, LOG_IN_REQUEST, SIGNUP_REQUEST,SIGNUP_FAILRUE, SIGNUP_SUCCESSUSER_REQUEST\r\n\t,USER_SUCCESS\r\n\t,USER_FAILRUE\r\n\t,USER_REQUEST\r\n\t} from '../reducers/user'\r\n\r\nimport axios from 'axios'\r\n\r\naxios.defaults.baseURL=\"http://localhost:4000\"\r\n\r\nfunction logInAPI() {\r\n\treturn axios.post('/api/user/login', body) //다른 리소스 간에 자원공유, course orgin\r\n}\r\n\r\nfunction signupAPI(){\r\n\treturn axios.post('/api/user/join', body)\r\n}\r\n\r\nfunction userAPI(){\r\n\treturn axios.get(`/api/user/:${body}`);\r\n}\r\n\r\n\r\nfunction* userinfo(action) {\r\n\tconsole.log('user_saga')\r\n\tconsole.log('action.data not json: ', action.data.userid)\r\n\ttry {\r\n\t\t//const result = yield call(userAPI, action.data.userid)\r\n\t\tyield put({\r\n\t\t\ttype: USER_SUCCESS,\t//\r\n\t\t\tdata: //result.data\r\n\t\t\t\t{\r\n\t\t\t\t\tid: '2', //primary key\r\n\t\t\t\t\temail: 'asdf@asdf',\r\n\t\t\t\t\tpassword: 'asdf',\r\n\t\t\t\t\tstdnum: 123123,\r\n\t\t\t\t\tmajor:  'asdf',\r\n\t\t\t\t\tnickname: 'asdfasdf',\r\n\t\t\t}\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: USER_FAILRUE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\n\r\n\r\nfunction* logIn(action) {\r\n\tconsole.log('login_saga')\r\n\tconsole.log('login data : ', action.data)\r\n\ttry {\r\n\t\tconst result = yield call(logInAPI, action.data)\r\n\t\tconsole.log(result.data);\r\n\t\tyield put({\r\n\t\t\ttype: LOG_IN_SUCCESS,\t//\r\n\t\t\tdata: result.data,\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: LOG_IN_FAILRUE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* signup(action) {\r\n\tconsole.log('signup_saga')\r\n\tconsole.log('action.data not json: ', action.data)\r\n\ttry {\r\n\t\t// const result = yield call(signupAPI, action.data)\r\n\t\tyield put({\r\n\t\t\ttype: SIGNUP_SUCCESS,\r\n\t\t\tdata: null\r\n\t\t})\t\r\n\t} catch (error) {\r\n\t\tyield put({\r\n\t\t\ttype: SIGNUP_FAILRUE,\r\n\t\t\terror: error.response.data\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction* watchLogIn() {\r\n\tyield takeLatest(LOG_IN_REQUEST, logIn)\r\n}\r\n\r\nfunction* watchSignup(){\r\n\tyield takeLatest(SIGNUP_REQUEST, signup)\r\n}\r\n\r\nfunction* watchUser(){\r\n\tyield takeLatest(USER_REQUEST, userinfo)\r\n}\r\n\r\nexport default function* userSaga() {\r\n\tyield all([\r\n\t\tfork(watchLogIn),\r\n\t\tfork(watchSignup),\r\n\t\tfork(watchUser),\r\n\t])\r\n}"]},"metadata":{},"sourceType":"module"}